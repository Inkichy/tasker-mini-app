{"version":3,"sources":["panels/MainPage/modals/Modals.js","panels/MainPage/components/Tasks.js","panels/MainPage/components/Notify.js","panels/MainPage/MainPage.js","App.js","index.js"],"names":["Modals","props","state","activeModal","modalHistory","this","indexOf","splice","push","setState","id","header","onClose","setActiveModal","top","type","defaultValue","onClick","Component","Tasks","styled","div","reorderList","list","from","to","_list","changeState","removeFromList","idx","newState","variable","taskList","fromId","title","description","before","map","item","draggable","after","appearance","size","onDragFinish","Notify","MainPage","activeTab","data","separator","sizeX","SizeType","REGULAR","selected","activePanel","App","useState","scheme","fetchedUser","setPopout","useEffect","a","fetchData","modal","bridge","send","ReactDOM","render","document","getElementById"],"mappings":"mSAyDeA,E,kDApDX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,YAAa,UACbC,aAAc,IALH,E,kDASnB,SAAeD,GACXA,EAAcA,GAAe,KAC7B,IAAIC,EAAeC,KAAKH,MAAME,aAAX,YACTC,KAAKH,MAAME,cACf,GAEc,OAAhBD,EACAC,EAAe,IAC+B,IAAvCA,EAAaE,QAAQH,GAC5BC,EAAeA,EAAaG,OACxB,EACAH,EAAaE,QAAQH,GAAe,GAGxCC,EAAaI,KAAKL,GAGtBE,KAAKI,SAAS,CACVN,cACAC,mB,oBAIR,WAAU,IAAD,OACL,OACI,cAAC,IAAD,CAAWD,YAAaE,KAAKH,MAAMC,YAAnC,SACI,eAAC,IAAD,CAAWO,GAAG,UACHC,OAAQ,8FACRC,QAAS,WAAO,EAAKC,eAAe,OAF/C,UAII,cAAC,IAAD,CAAUC,IAAI,yDAAd,SACI,cAAC,IAAD,CAAOC,KAAK,OAAOC,aAAa,OAEpC,cAAC,IAAD,CAAUF,IAAI,mDAAd,SACI,cAAC,IAAD,CAAOC,KAAK,OAAOC,aAAa,OAEpC,cAAC,IAAD,CAAQC,QAAS,aAAjB,iE,GA/CCC,aC+FNC,GArFSC,IAAOC,IAAV,iF,kDAOjB,WAAYpB,GAAQ,IAAD,8BACf,cAAMA,IA0BVqB,YAAc,WAAeC,GAAU,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,GACbC,EAAK,YAAOH,GAClBG,EAAMnB,OAAOiB,EAAM,GACnBE,EAAMnB,OAAOkB,EAAI,EAAGF,EAAKC,IACzB,EAAKG,YAAYD,EAAO,aA/BT,EAkCnBE,eAAiB,SAACC,EAAKN,GACnB,IAAMG,EAAK,YAAOH,GAClBG,EAAMnB,OAAOsB,EAAK,GAClB,EAAKF,YAAYD,EAAO,aArCT,EAwCnBC,YAAc,SAACG,EAAUC,GAAX,OAAwB,EAAKtB,SAAL,eAAgBsB,EAAWD,KArC7D,EAAK5B,MAAQ,CACT8B,SAAU,CACN,CACIC,OAAQ,OACRC,MAAO,iHACPC,YAAY,uaAGhB,CACIF,OAAQ,OACRC,MAAO,iNACPC,YAAY,uaAGhB,CACIF,OAAQ,OACRC,MAAO,wFACPC,YAAY,yaApBT,E,0CA0CnB,WAAU,IAAD,OACL,OACI,qCACI,cAAC,IAAD,CAAYlB,QAAS,aAAUmB,OAAQ,cAAC,IAAD,IAAvC,yGAGA,cAAC,IAAD,UACI,cAAC,IAAD,UACK/B,KAAKH,MAAM8B,SAASK,KAAI,SAACC,EAAMT,GAAP,OACrB,cAAC,IAAD,CAEIU,WAAS,EACTC,MAAO,cAAC,IAAD,CACHC,WAAY,UACZC,KAAM,IACNzB,QAAS,aAHN,oEAOP0B,aAAc,gBAAGnB,EAAH,EAAGA,KAAMC,EAAT,EAASA,GAAT,OACV,EAAKH,YACD,CAAEE,OAAMC,MACR,EAAKvB,MAAM8B,WAbvB,SAiBKM,EAAKJ,OAhBDI,iB,GAtDjBpB,cChBd0B,E,4JACF,WACI,OACI,0C,GAHS1B,aAUN0B,ICsDAC,E,kDAlDX,WAAY5C,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACT4C,UAAW,QACXC,KAAM,EAAK9C,MAAM8C,MALN,E,0CASnB,WAAU,IAAD,OACL,OACI,eAAC,IAAD,CAAOrC,GAAIL,KAAKJ,MAAMS,GAAtB,UACI,cAAC,IAAD,CACIsC,UAAW3C,KAAKJ,MAAMgD,QAAUC,IAASC,QAD7C,oBAKA,eAAC,IAAD,WACI,eAAC,IAAD,WACI,cAAC,IAAD,CACIlC,QAAS,kBAAM,EAAKR,SAAS,CAAEqC,UAAW,WAC1CM,SAAmC,UAAzB/C,KAAKH,MAAM4C,UAFzB,wDAMA,cAAC,IAAD,CACI7B,QAAS,kBAAM,EAAKR,SAAS,CAAEqC,UAAW,YAC1CM,SAAmC,WAAzB/C,KAAKH,MAAM4C,UAFzB,mFAOJ,eAAC,IAAD,CAAMO,YAAahD,KAAKH,MAAM4C,UAA9B,UACI,cAAC,IAAD,CAAOpC,GAAI,QAAX,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOA,GAAI,SAAX,SACI,cAAC,EAAD,mB,GAtCLQ,aCuCRoC,EAvCH,WACX,MAA4BC,mBAAS,gBAArC,mBAAOC,EAAP,KACA,GADA,KACsCD,mBAAS,UAA/C,mBAAOF,EAAP,KACA,GADA,KAC+BE,mBAAS,OAAxC,mBAAOE,EAAP,KACA,GADA,KAC4BF,mBAAS,cAAC,IAAD,CAAeb,KAAK,YAAzD,mBAAegB,GAAf,WAiBA,OAfAC,qBAAU,WAAM,4CAOf,sBAAAC,EAAA,sDAGCF,EAAU,MAHX,4CAPe,0DAYfG,KACE,IAGF,cAAC,IAAD,CAAgBL,OAAQA,EAAxB,SACC,cAAC,IAAD,UACC,cAAC,IAAD,UAEC,cAAC,IAAD,CAAaM,MAAO,cAAC,EAAD,IAApB,SACC,cAAC,IAAD,UACC,cAAC,IAAD,CAAMT,YAAaA,EAAnB,SACC,cAAC,EAAD,CAAU3C,GAAI,QAASqC,KAAMU,iBCtCrCM,IAAOC,KAAK,gBAEZC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.862375bd.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {Button, CellButton, FormItem, Headline, Input, ModalCard, ModalPage, ModalRoot} from \"@vkontakte/vkui\";\r\n\r\nclass Modals extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            activeModal: 'newTask',\r\n            modalHistory: []\r\n        }\r\n    }\r\n\r\n    setActiveModal(activeModal) {\r\n        activeModal = activeModal || null;\r\n        let modalHistory = this.state.modalHistory\r\n            ? [...this.state.modalHistory]\r\n            : [];\r\n\r\n        if (activeModal === null) {\r\n            modalHistory = [];\r\n        } else if (modalHistory.indexOf(activeModal) !== -1) {\r\n            modalHistory = modalHistory.splice(\r\n                0,\r\n                modalHistory.indexOf(activeModal) + 1\r\n            );\r\n        } else {\r\n            modalHistory.push(activeModal);\r\n        }\r\n\r\n        this.setState({\r\n            activeModal,\r\n            modalHistory,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ModalRoot activeModal={this.state.activeModal}>\r\n                <ModalPage id=\"newTask\"\r\n                           header={'Добавить заметку'}\r\n                           onClose={() => {this.setActiveModal(null)}}\r\n                >\r\n                    <FormItem top=\"Заголовок\">\r\n                        <Input type=\"text\" defaultValue=\"\" />\r\n                    </FormItem>\r\n                    <FormItem top=\"Описание\">\r\n                        <Input type=\"text\" defaultValue=\"\" />\r\n                    </FormItem>\r\n                    <Button onClick={() => {}}>Создать</Button>\r\n                </ModalPage>\r\n            </ModalRoot>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Modals;","import React, {Component} from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport {\r\n    Button,\r\n    Cell,\r\n    CellButton,\r\n    Group,\r\n    List\r\n} from \"@vkontakte/vkui\";\r\nimport {Icon28AddOutline} from \"@vkontakte/icons\";\r\nimport Modals from \"../modals/Modals\";\r\n\r\nconst TaskListWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n`;\r\n\r\nclass Tasks extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            taskList: [\r\n                {\r\n                    fromId: 123456,\r\n                    title: \"Написать хороший код\",\r\n                    description: `Очень проработанный код и бла бля бла\r\n                                  и бла бля бла и бла бля бла и бла бля бла`,\r\n                },\r\n                {\r\n                    fromId: 123456,\r\n                    title: \"Сделать рефакторинг, отладку, красивый ui\",\r\n                    description: `Очень проработанный код и бла бля бла\r\n                                  и бла бля бла и бла бля бла и бла бля бла`,\r\n                },\r\n                {\r\n                    fromId: 123456,\r\n                    title: \"Скушать печенье\",\r\n                    description: `Очень проработанный код и бла бля бла\r\n                                  и бла бля бла и бла бля бла и бла бля бла`,\r\n                }\r\n            ]\r\n        }\r\n    }\r\n\r\n    reorderList = ({ from, to }, list) => {\r\n        const _list = [...list];\r\n        _list.splice(from, 1);\r\n        _list.splice(to, 0, list[from]);\r\n        this.changeState(_list, 'taskList');\r\n    };\r\n\r\n    removeFromList = (idx, list) => {\r\n        const _list = [...list];\r\n        _list.splice(idx, 1);\r\n        this.changeState(_list, 'taskList');\r\n    };\r\n\r\n    changeState = (newState, variable) => this.setState({[variable]: newState})\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <CellButton onClick={() => {}} before={<Icon28AddOutline />}>\r\n                    Добавить Заметку\r\n                </CellButton>\r\n                <Group>\r\n                    <List>\r\n                        {this.state.taskList.map((item, idx) => (\r\n                            <Cell\r\n                                key={item}\r\n                                draggable\r\n                                after={<Button\r\n                                    appearance={'neutral'}\r\n                                    size={'m'}\r\n                                    onClick={() => {}}\r\n                                >\r\n                                    Подробнее\r\n                                </Button>}\r\n                                onDragFinish={({ from, to }) =>\r\n                                    this.reorderList(\r\n                                        { from, to },\r\n                                        this.state.taskList\r\n                                    )\r\n                                }\r\n                            >\r\n                                {item.title}\r\n                            </Cell>\r\n                        ))}\r\n                    </List>\r\n                </Group>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Tasks;","import React, {Component} from 'react';\r\n\r\nclass Notify extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                sdf\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Notify;","import React, {Component} from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport {\r\n    Group,\r\n    Panel,\r\n    PanelHeader,\r\n    SizeType,\r\n    Tabs,\r\n    TabsItem, View\r\n} from \"@vkontakte/vkui\";\r\n\r\nimport Tasks from \"./components/Tasks\";\r\nimport Notify from \"./components/Notify\";\r\n\r\nclass MainPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            activeTab: \"tasks\",\r\n            data: this.props.data\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Panel id={this.props.id}>\r\n                <PanelHeader\r\n                    separator={this.props.sizeX === SizeType.REGULAR}\r\n                >\r\n                    Tasker\r\n                </PanelHeader>\r\n                <Group>\r\n                    <Tabs>\r\n                        <TabsItem\r\n                            onClick={() => this.setState({ activeTab: \"tasks\" })}\r\n                            selected={this.state.activeTab === \"tasks\"}\r\n                        >\r\n                            Заметки\r\n                        </TabsItem>\r\n                        <TabsItem\r\n                            onClick={() => this.setState({ activeTab: \"notify\" })}\r\n                            selected={this.state.activeTab === \"notify\"}\r\n                        >\r\n                            Уведомления\r\n                        </TabsItem>\r\n                    </Tabs>\r\n                    <View activePanel={this.state.activeTab}>\r\n                        <Panel id={'tasks'}>\r\n                            <Tasks />\r\n                        </Panel>\r\n                        <Panel id={'notify'}>\r\n                            <Notify />\r\n                        </Panel>\r\n                    </View>\r\n                </Group>\r\n            </Panel>\r\n        );\r\n    }\r\n}\r\n\r\nMainPage.propTypes = {\r\n    id: PropTypes.string.isRequired\r\n};\r\n\r\nexport default MainPage;","import React, { useState, useEffect } from 'react';\nimport bridge from '@vkontakte/vk-bridge';\nimport {\n\tView,\n\tAdaptivityProvider,\n\tAppRoot,\n\tConfigProvider,\n\tSplitLayout,\n\tSplitCol, ScreenSpinner,\n} from '@vkontakte/vkui';\nimport '@vkontakte/vkui/dist/vkui.css';\n\nimport MainPage from './panels/MainPage/MainPage';\nimport Modals from \"./panels/MainPage/modals/Modals\";\n\nconst App = () => {\n\tconst [scheme, setScheme] = useState('bright_light')\n\tconst [activePanel, setActivePanel] = useState('tasks');\n\tconst [fetchedUser, setUser] = useState(null);\n\tconst [popout, setPopout] = useState(<ScreenSpinner size='large' />);\n\n\tuseEffect(() => {\n\t\t// bridge.subscribe(({ detail: { type, data }}) => {\n\t\t// \tif (type === 'VKWebAppUpdateConfig') {\n\t\t// \t\tsetScheme(data.scheme)\n\t\t// \t}\n\t\t// });\n\n\t\tasync function fetchData() {\n\t\t\t// const user = await bridge.send('VKWebAppGetUserInfo');\n\t\t\t// setUser(user);\n\t\t\tsetPopout(null);\n\t\t}\n\t\tfetchData();\n\t}, []);\n\n\treturn (\n\t\t<ConfigProvider scheme={scheme}>\n\t\t\t<AdaptivityProvider>\n\t\t\t\t<AppRoot>\n\t\t\t\t\t{/*popout={popout}*/}\n\t\t\t\t\t<SplitLayout modal={<Modals />}>\n\t\t\t\t\t\t<SplitCol>\n\t\t\t\t\t\t\t<View activePanel={activePanel}>\n\t\t\t\t\t\t\t\t<MainPage id={'tasks'} data={fetchedUser}/>\n\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t</SplitCol>\n\t\t\t\t\t</SplitLayout>\n\t\t\t\t</AppRoot>\n\t\t\t</AdaptivityProvider>\n\t\t</ConfigProvider>\n\t);\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport bridge from \"@vkontakte/vk-bridge\";\nimport App from \"./App\";\n\n// Init VK  Mini App\nbridge.send(\"VKWebAppInit\");\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nif (process.env.NODE_ENV === \"development\") {\n  import(\"./eruda\").then(({ default: eruda }) => {}); //runtime download\n}\n"],"sourceRoot":""}